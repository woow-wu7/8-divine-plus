{
  "compilerOptions": {
    "target": "esnext",
    "module": "esnext",
    "strict": true,
    "jsx": "preserve",
    "moduleResolution": "node", // 以上是 vue 推荐的配置
    "skipLibCheck": true, // 略过声明检查
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "forceConsistentCasingInFileNames": true,
    "useDefineForClassFields": true,
    "sourceMap": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["packages/*"]
    },
    "lib": ["esnext", "dom", "dom.iterable", "scripthost"],
    "allowJs": true,
    "experimentalDecorators": true,
    "types": ["node", "webpack-env"] // 1. 只有 node 和 webpack-env 的包声明文件会自动引入，其他模块的声明文件不会自动引入 2. webpack-env这里主要用于 require.context 的ts类型
  },

  // 1
  // eg: backup组件
  // 如果报错：找不到模块，需要配置两个地方
  // - a. 在 components 文件夹下编写 index.d.ts
  // - b. 在 package.json 中 include 添加路径  "packages/components/*"

  // 2
  // 注意区分：别名的设置
  "include": [
    "packages/*",
    "packages/components/*", // 这里必须添加，不然package/components/组件/index.ts中引入组件会报错，找不到模块
    "examples/*",
    "docs/*",
    "utils/*",
    "vue.config.js",
    "packages/components/index.d.ts",
    "packages/shims-vue.d.ts",
    "packages/components/index.d.ts"
  ],
  // 因为: 这里不去用 ts 解析 node_modules 中的文件
  // 所以: node_module 中需要提供 js 文件
  "exclude": ["node_modules"]
}
